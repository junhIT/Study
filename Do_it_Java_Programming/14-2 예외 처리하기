[TOC]

# try-catch문

- try 블록에는 예외가 발생할 수 있는 코드를 작성
- try 블록 안에서 예외가 발생하면 catch 블록이 수행

```
try {
	예외가 발생할 수 있는 코드 부분
} catch(처리할 예외 타입 e) {
	try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
}
```





# try-catch문 사용하기

- 배열 범위가 유효한 4까지는 배열에 저장되어 출력하고 그 다음 값을 배열에 넣으려 할 때 오류가 발생.
- 예외 처리는 프로그램이 비정상 종료되는 것을 방지할 수 있으므로 매우 중요하다

```java
public class ArrayExceptionHandling {
	public static void main(String[] args) {
		int[] arr = new int[5];
		
		try {
			for(int i = 0; i <= 5; i++) {
				arr[i] = i;
				System.out.println(arr[i]);
			}
		} catch(ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
			System.out.println("예외 처리 부분");
		}
		System.out.println("프로그램 종료");
	}
}
-------------------------------------------------------------------------------------------------------------------------------
0
1
2
3
4
java.lang.ArrayIndexOutOfBoundsException: 5
예외 처리 부분
프로그램 종료
```



# 컴파일러에 의해 예외가 체크되는 경우



## 파일 입출력에서 발생하는 예외 처리하기

```java
public class ExceptionHandling1 {
	public static void main(String[] args) {
		try {
			FileInputStream fis = new FileInputStream("a.txt");
		} catch (FileNotFoundException e) {
			System.out.println(e);
		}
		System.out.println("여기도 수행됩니다.");
	}
}
```



# try-catch-finally 문

- 프로그램에서 사용한 시스템 리소스는 한정되어있으므로, 사용 후 반드시 clsoe()메서드로 닫아 주어야 함.
  - 항상 수행되는 finally문에 try문에서 사용한 시스템 리소스를 닫아주면 각 catch 블록마다 리소스를 해제해주지 않아도 됨. 

```
try {
	예외가 발생할 수 있는 코드 부분
} catch(처리할 예외 타입 e) {
	try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
} finally {
	항상 수행되는 부분
}
```



# try-with-resources문(자바 7 ~)

- close() 메서드를 호출하지 않아도 try 블록 내에서 열린 리소스를 자동으로 닫도록 해줌
- AutoCloseable 인터페이스를 구현해야 함



## AutoCloseable 인터페이스

```java
public class AutoCloseObj implements AutoCloseable{
	@Override
	public void close() throws Exception {
		System.out.println("리소스가 close() 되었습니다.");
	}
}
```

```java
public class AutoCloseTest {
	public static void main(String[] args) {
		try(AutoCloseObj obj = new AutoCloseObj()) {
			throw new Exception();	// 강제 예외 발생
		} catch(Exception e) {
			System.out.println("예외 부분입니다");
		}
	}
}
-------------------------------------------------------------------------------------------------------------------------
리소스가 close() 되었습니다.
예외 부분입니다
```

- try 문의 괄호 안에 리소스를 선언
- 리소스를 여러개 선언할 경우 세미콜론(;)으로 구분



## 향상된 try-with-resources문(자바 9에서 추가된 문법)

- 자바 7에서는 AutoCloseable 인터페이스를 구현한 리소스의 변수 선언을 try문 괄호 안에서 해야함.
- 리소스가 외부에 선언되고 생성된 경우데도 다른 참조 변수로 괄호 안에 다시 선언해야 하였음.

```java
AutoCloseObj obj = new AutoCloseObj();
try(AutoCloseObj obj2 = obj) {
	throw new Exception();
} catch(Exception e) {
	System.out.println("예외 부분입니다.")
}
```

- 외부에서 선언한 변수 사용 가능 ( 자바 9 ~ )

```java
AutoCloseObj obj = new AutoCloseObj();
try(obj) {
	throw new Exception();
} catch(Exception e) {
	System.out.println("예외 부분입니다.")
}
```

